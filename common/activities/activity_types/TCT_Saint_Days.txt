activity_TCT_saint_days = {
	is_shown = {
		has_character_flag = hosting_saint_day
		trigger_if = {
			limit = {
				is_ai = yes
			}
			is_at_war = no
			short_term_gold >= pilgrimage_base_cost
		}
	}

	can_start_showing_failures_only = {
		is_available_adult = yes
	}

	is_valid = {
		NOT = {
			has_variable = activity_invalidated
		}
		scope:host = {
			is_imprisoned = no
			is_landed = yes
			NOT = { is_incapable = yes }
		}
		# Converting mid-activity is a big no-no.
		scope:activity = {
			OR = {
				NOT = { has_variable = starting_faith }
				scope:host.faith = var:starting_faith
			}
		}
	}

	on_invalidated = {
		# Host becomes unlanded
		if = {
			limit = {
				scope:host = { is_landed = no }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			every_attending_character = {
				trigger_event = activity_system.0320
			}
		}
		if = {
			limit = {
				scope:host = { is_incapable = yes }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			scope:host = {
				trigger_event = activity_system.0330
			}
			every_attending_character = {
				limit = { NOT = { this = scope:host } }
				trigger_event = activity_system.0331
			}
		}
	}

	on_host_death = {
		scope:activity = {
			set_variable = {
				name = activity_invalidated
			}
		}
	}

	province_filter = realm
	ai_province_filter = realm
	wait_time_before_start = {days = 14 }

	province_description = {
		#Does this have a temple holding?
		triggered_desc = {
			trigger = {
				has_holding_type = church_holding
			}
			desc = activity_TCT_saint_days_temple_holding_desc
		}
	}

	###################
	# OPTIONS
	###################

	special_option_category = special_type

	options = {
		#########
		# TYPE OF VISIT
		#########
		special_type = {
			TCT_saint_days_type_reverence = {
				default = yes	
				ai_will_do = {
					value = 10
					if = {
						limit = {
							has_trait = zealous
						}
						add = 5
					}
					if = {
						limit = {
							has_trait = diligent
						}
						add = 5
					}
					if = {
						limit = {
							has_trait = ambitious
						}
						add = 5
					}
				}
			}
			TCT_saint_days_type_tradition = {		
				ai_will_do = {
					value = 10
					if = {
						limit = {
							has_trait = just
						}
						add = 5
					}
					if = {
						limit = {
							has_trait = honest
						}
						add = 5
					}
				}
			}
			TCT_saint_days_type_festivity = {		
				ai_will_do = {
					value = 10
					if = {
						limit = {
							has_trait = gregarious
						}
						add = 5
					}
					if = {
						limit = {
							has_trait = lifestyle_reveler
						}
						add = 10
					}
					if = {
						limit = {
							has_trait = drunkard
						}
						add = 10
					}
				}
			}
		}

		#########
		# SIZE OF DONATION OPTION
		#########
		TCT_saint_days_cost_type = {
			TCT_saint_days_cost_type_small = {
				default = yes
				cost = {
					gold = tiny_gold_value
				}
				ai_will_do = {
					value = 15
				}
			}
			TCT_saint_days_cost_type_large = {
				cost = {
					gold = medium_gold_value 
				}				
				ai_will_do = {
					value = 5
					if = {
						limit = {
							short_term_gold <= medium_gold_value
						}
						subtract = {
							value = 10
						}
					}
				}
			}
		}
		#########
		# PROCESSION OPTION
		#########
		TCT_saint_days_procession_type = {
			TCT_saint_days_procession_type_modest = {
				default = yes			

				# Entourage option grabbing suitable bodyguards & maybe someone from court who really likes you, + randos.
				travel_entourage_selection = { 
					weight = pilgrimage_entourage_base_set_weighting_value
					max = pilgrimage_entourage_pomp_appropriate_max_value
					invite_rule_order = 1
				}

				ai_will_do = {
					value = 15
				}
			}
			TCT_saint_days_procession_type_sizeable = {
				cost = {
					gold = {
						add = {
							add = {
								value = 50
								desc = TCT_saint_days_procession_cost_sizeable
							}
							add = {
								value = 50 
								multiply = activity_cost_scale_by_tier
								subtract = 50
								desc = activity_cost_scale_by_tier_desc
							}
							add = {
								value = 50 
								multiply = activity_cost_scale_by_era
								subtract = 50 
								desc = activity_cost_scale_by_era_desc
							}
							if = {
								limit = {
									dynasty ?= { has_dynasty_perk = ep2_activities_legacy_1 }
								}
								subtract = {
									value = 50
									multiply = ep2_activities_legacy_1_pilgrimages_discount_value
									desc = ep2_activities_legacy_track
								}
							}
						}
					}
				}

				#Entourage option grabbing most people suitable from court, + randos.
				travel_entourage_selection = {
					weight = {
						add = pilgrimage_entourage_base_set_weighting_value
						add = pilgrimage_entourage_extras_set_weighting_value
					}

					max = pilgrimage_entourage_pomp_ceremonial_max_value
					invite_rule_order = 1
				}

				ai_will_do = {
					value = 5
					if = {
						limit = {
							short_term_gold <= 100
						}
						subtract = {
							value = 10
						}
					}
				}
			}
			TCT_saint_days_procession_type_grand = {
				cost = {
					gold = {
						add = {
							add = {
								value = 100
								desc = TCT_saint_days_procession_cost_grand
							}
							add = {
								value = 100 
								multiply = activity_cost_scale_by_tier
								subtract = 100
								desc = activity_cost_scale_by_tier_desc
							}
							add = {
								value = 100 
								multiply = activity_cost_scale_by_era
								subtract = 100 
								desc = activity_cost_scale_by_era_desc
							}
							if = {
								limit = {
									dynasty ?= { has_dynasty_perk = ep2_activities_legacy_1 }
								}
								subtract = {
									value = 100
									multiply = ep2_activities_legacy_1_pilgrimages_discount_value
									desc = ep2_activities_legacy_track
								}
							}
						}
					}
				}

				#Entourage option grabbing most people suitable from court, + randos.
				travel_entourage_selection = {
					weight = {
						add = pilgrimage_entourage_base_set_weighting_value
						add = pilgrimage_entourage_extras_set_weighting_value
					}

					max = pilgrimage_entourage_pomp_ceremonial_max_value
					invite_rule_order = 1
				}

				ai_will_do = {
					value = 5
					if = {
						limit = {
							short_term_gold <= 200
						}
						subtract = {
							value = 10
						}
					}
				}
			}
		}

	}

	###################
	# PHASES
	###################

	phases = {
		TCT_saint_days_devotion_phase = {
			is_predefined = yes
			
			on_phase_active = {
				if = {
					limit = {
						this = scope:host
					}
					trigger_event = TCT_saint_days.0004
				}
			}

			on_end = {

			}
		}
	}

	max_guest_arrival_delay_time = { days = 14 }

	# desc is only shown in debug AI watch window
	ai_will_do = {
		value = 50
		
		# How much do you care about your faith not liking this?
		if = {
			limit = {
				has_trait = cynical
			}
			add = -25
		}
		if = {
			limit = {
				has_trait = zealous
			}
			add = 25
		}
		if = {
			limit = {
				has_trait = lazy
			}
			add = -25
		}
		if = {
			limit = {
				has_trait = diligent
			}
			add = 25
		}
		if = {
			limit = {
				has_trait = sadistic
			}
			add = -25
		}
		if = {
			limit = {
				has_trait = compassionate
			}
			add = 25
		}
		
		#Can you actually afford this?
		if = {
			limit = {
				NOT = { can_make_expensive_purchase_trigger = { PRICE = 10 } }
			}
			add = -50
		}
	}

	ai_check_interval = 48

	ai_will_select_province = {
		value = 10
	}
	
	is_location_valid = {
		has_holding_type = church_holding
	}
	
	province_score = {
		value = 0
		# BUILDINGS
		if = {
			limit = { has_holding_type = church_holding }
			add = 25
		}
	}
	
	cost = {
		gold = {
			add = {
				value = 0
				add = {
					value = RICE_ancestor_activity_cost
					desc = hunt_base_cost
				}
			}
		}
	}

	ui_predicted_cost = {
		gold = {
			value = RICE_ancestor_activity_cost

			# Options
			add = { # Donations Option 
				value = tiny_gold_value # Small Cost
				add = medium_gold_value # Large Cost
				# Scale option costs by tier and era
				multiply = activity_cost_scale_by_tier
				multiply = activity_cost_scale_by_era
				# Divide by the number of option levels to get an average option cost
				divide = 4
			}
			add = { # Procession Option 
				value = 0 # Modest Cost
				add = 50 # Sizeable Cost
				add = 100 # Grand Cost
				# Scale option costs by tier and era
				multiply = activity_cost_scale_by_tier
				multiply = activity_cost_scale_by_era
				# Divide by the number of option levels to get an average option cost
				divide = 4
			}

			# Make it a multiple of 5 (rounded up)
			divide = 5 
			ceiling = yes 
			multiply = 5
		}
	}
	cooldown = { days = 3650 }
	
	###################
	# ACTIVITY-SPECIFIC PULSES
	###################
	
	pulse_actions = {

	}

	on_enter_passive_state = {	
		
	}
	

	###################
	# GUEST HANDLING
	###################

	max_guests = 15

	allow_zero_guest_invites = yes

	guest_invite_rules = {
		rules = {
			# Relations.
			2 = activity_invite_rule_lovers
			2 = activity_invite_rule_rivals_if_appropriate

			# Family.
			3 = activity_invite_rule_extended_family

			# Misc landless.
			5 = activity_invite_rule_knights

			# MP 
			6 = activity_invite_mp
		}
		defaults = {
			1 = activity_invite_rule_friends
			1 = activity_invite_rule_close_family
			3 = activity_invite_rule_courtiers
			4 = activity_invite_rule_guests
			1 = activity_invite_spouses
		}
	}

	can_be_activity_guest = {
		faith.religion = scope:host.faith.religion
		is_adult = yes
		is_available = yes
		in_diplomatic_range = scope:host
		OR = {
			is_landed = no
			dynasty = scope:host.dynasty
		}
	}

	host_intents = {
		intents = { TCT_saint_days_reverence_intent TCT_saint_days_gratitude_intent TCT_saint_days_atonement_intent }
		default = TCT_saint_days_reverence_intent
	}

	guest_intents = {
		intents = { TCT_saint_days_reverence_intent TCT_saint_days_gratitude_intent TCT_saint_days_atonement_intent }
		default = TCT_saint_days_reverence_intent
	}

	guest_join_chance = {
		base = 0
		base_activity_modifier = yes

		# Scripted Modifiers
		activity_guest_shared_ai_accept_modifier = yes
	}
	
	on_complete = {
		if = {
			limit = { this = scope:host }
			create_character_memory = {
				type = TCT_saint_days_host_memory
			}
			scope:host = {
				TCT_saint_days_completed_log_entry_effect = yes
			}
		}
		else = {			
			create_character_memory = {
				type = TCT_saint_days_guest_memory
				participants = {
					host = scope:host
				}
			}
		}
	}

	## Graphics
	# Travel # Do we need these??
	background = { # Bridge
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_riverside_province = yes
				geographical_region = world_europe
				OR = {
					terrain = farmlands
					terrain = plains
					terrain = mountains
					terrain = hills
				}
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_bridge.dds"
		environment = "environment_travel_bridge"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	background = { # Farmland, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_farm.dds"
		environment = "environment_travel_farmlands"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { # Farmland, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/farms.dds"
		environment = "environment_event_farms"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #Desert, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_desert.dds"
		environment = "environment_travel_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}
	background = { #Desert, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/desert.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}
	background = { #forest snowy
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location ?= { hunt_snowy_forest_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_hunt_snowy_forest.dds"
		environment = "environment_hunt_snowy_forest"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day" 
	}
	background = { #forest_pine
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_pine_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_pine.dds"
		environment = "environment_event_forest_pine"
		ambience = "event:/SFX/Events/Backgrounds/coniferous_forest_day"
	}
	background = { #forest
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}
	background = { #mountains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_mountains.dds"
		environment = "environment_travel_mountain_settlement"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	background = { #mountains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/mountains.dds"
		environment = "environment_event_mountains"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	background = { #steppe, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_steppe.dds"
		environment = "environment_travel_steppe_settlement"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}
	background = { #steppe, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/steppe.dds"
		environment = "environment_event_steppe"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}
	background = { #drylands (formerly desert)
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_drylands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/drylands.dds"
		environment = "environment_event_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}
	background = { #wetlands
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_wetlands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_wetlands.dds"
		environment = "environment_event_bp1_wetlands" 
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}
	background = { #jungle
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_jungle_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_jungle.dds"
		environment = "environment_event_bp1_jungle"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}
	background = { #plains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #plains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_plains.dds"
		environment = "environment_event_bp1_plains"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #hills, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #hills, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_hills.dds"
		environment = "environment_event_bp1_hills"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #sea
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_sea_province = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/fp1_ocean.dds"
		environment = "environment_event_fp1_ocean"
		ambience = "event:/DLC/FP1/SFX/Events/event_ocean_longship"
	}

	# Festival
	background = {
		trigger = {
			activity_location = {
				province_owner ?= {
					OR = {
						government_has_flag = government_is_clan
						government_has_flag = government_is_tribal
					}
				}
				NOT = {
					geographical_region = graphical_mena
				}
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_tournament_tribal.dds"
		environment = "environment_village_festival"
		ambience = "event:/DLC/EP2/SFX/Events/Backgrounds/evn_background_festival_western"
	}
	background = { #Western (standard/fallback)
		texture = "gfx/interface/illustrations/event_scenes/ep2_village_festival_western.dds"
		environment = "environment_village_festival"
		ambience = "event:/SFX/Events/Backgrounds/corner_of_tavern"
	}

	window_characters = {

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character = {
							has_activity_intent = TCT_saint_days_reverence_intent
						}
					}
					animation = { personality_zealous personality_honorable toast_goblet thinking }
				}
				triggered_animation = {
					trigger = {
						scope:character = {
							has_activity_intent = TCT_saint_days_gratitude_intent
						
						}
					}
					animation = { personality_compassionate personality_content happiness steward drink_goblet toast }
				}
				triggered_animation = {
					trigger = {
						scope:character = {
							has_activity_intent = TCT_saint_days_atonement_intent
						}
					}
					animation = { throne_room_bow_1 throne_room_bow_2 }
				}
			}
		}

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character = {
							has_activity_intent = TCT_saint_days_reverence_intent
						}
					}
					animation = { personality_zealous personality_honorable toast_goblet thinking }
				}
				triggered_animation = {
					trigger = {
						scope:character = {
							has_activity_intent = TCT_saint_days_gratitude_intent
						
						}
					}
					animation = { personality_compassionate personality_content happiness steward drink_goblet toast }
				}
				triggered_animation = {
					trigger = {
						scope:character = {
							has_activity_intent = TCT_saint_days_atonement_intent
						}
					}
					animation = { throne_room_bow_1 throne_room_bow_2 }
				}
			}
		}
		
		host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character = {
							has_activity_intent = TCT_saint_days_reverence_intent
						}
					}
					animation = { personality_zealous personality_honorable toast_goblet thinking }
				}
				triggered_animation = {
					trigger = {
						scope:character = {
							has_activity_intent = TCT_saint_days_gratitude_intent
						
						}
					}
					animation = { personality_compassionate personality_content happiness steward drink_goblet toast }
				}
				triggered_animation = {
					trigger = {
						scope:character = {
							has_activity_intent = TCT_saint_days_atonement_intent
						}
					}
					animation = { throne_room_bow_1 throne_room_bow_2 }
				}
			}
		}
		
		travel_host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						NOT = {
							scope:host.location = scope:activity.activity_location
						}
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				animation = jockey_walk
			}
		}

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						NOT = {
							scope:host.location = scope:activity.activity_location
						}
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = jockey_walk
			}
		}

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						NOT = {
							scope:host.location = scope:activity.activity_location
						}
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = jockey_walk
			}
		}
	}
}
