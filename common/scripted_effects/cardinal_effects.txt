become_cardinal = { 
	# Find random cardinal seat with dead holder, replace it
	random_in_global_list = {
		variable = cardinals # List of cardinal stories
		limit = {story_owner = {is_alive = no}} # Make sure the owner is dead before replacing them
		make_story_owner = prev
		prev = {
			set_variable = {
				name = cardinal_story
				value = prev
			}
		}
	}
}

remove_cardinal = {
	#remove_variable = cardinals
	random_owned_story = {
		limit = {
			story_type = cardinal_story
		}
		end_story = yes
	}
}
# 
become_initial_cardinal = {
	create_story = cardinal_story
	set_variable = was_once_cardinal
	if = {
		limit = {
			is_landed = no
			is_theocratic_lessee = no
		}
		add_trait = cardinal_priest
		give_nickname = nick_cardinal
	}
}
# Updates Preferatus
update_preferatus = {
	# Who's the most likely next pope? (Preferatus)
	ordered_in_global_list = {
		limit = {exists = this }
		variable = cardinals
		order_by = story_owner.cardinal_to_pope_score
		position = 0
		set_global_variable = {
			name = preferatus
			value = this
		}
		# Tell the GUI who it is:
		global_var:gui_storage = {
			set_variable = {
				name = preferatus
				value = prev
			}
		}
	}
}
# Updates the likely next cardinal candidate ("Predictus" is the mod's term for it, but it is not a real term, unlike Preferatus.)
select_highest_scoring_cardinal_candidate = { 
	# Look for rulers who are valid candidates:
	ordered_cardinal_candidate_ruler = {
		order_by = bishop_to_cardinal_score
		position = 0
		add_to_list = highest_scoring_cardinal_candidates
	}
	# Look for rulers whose realm priests are valid candidates: 
	ordered_ruler_with_potential_cardinal = {
		order_by = realm_priest.bishop_to_cardinal_score
		position = 0
		realm_priest = {add_to_list = highest_scoring_cardinal_candidates}
	}
	# Choose the best one as scope:highest_scoring_cardinal_candidate (Predictus)
	ordered_in_list = {
		limit = {exists = this}
		list = highest_scoring_cardinal_candidates
		order_by = bishop_to_cardinal_score
		position = 0
		save_scope_as = highest_scoring_cardinal_candidate
	}
	# You can easily change this system to use one secular and one spiritual candidate, if you wish to show such in the GUI.
}

select_highest_scoring_character_cardinal_candidate = {
	# Look through characters's vassals_or_below for valid candidates 
	if = {
		limit = {
			has_variable = has_set_cardinal_player_candidate
			var:has_set_cardinal_player_candidate = {
				is_alive = yes
			}
		}
		var:has_set_cardinal_player_candidate = {
			save_scope_as = highest_scoring_cardinal_candidate
		}
	}
	else = {
		ordered_cardinal_candidate_vassal = {
			order_by = bishop_to_cardinal_score
			position = 0
			add_to_list = highest_scoring_character_cardinal_candidates
		}
		# Check player's own realm priest
		if = {
			limit = {exists = realm_priest}
			realm_priest = {add_to_list = highest_scoring_character_cardinal_candidates}
		}
		# Select player's best candidate:
		ordered_in_list = {
			limit = {exists = this is_alive = yes NOT = { is_cardinal = yes}}
			list = highest_scoring_character_cardinal_candidates
			order_by = bishop_to_cardinal_score
			position = 0
			save_scope_as = highest_scoring_character_cardinal_candidate_selected
		}
		set_variable = {
			name = cardinal_player_candidate
			value = scope:highest_scoring_character_cardinal_candidate_selected
		}
	}
}

promote_new_cardinal = {
#Scope: The cardinal story to replace the owner of
	# Promote the best candidate
	select_highest_scoring_cardinal_candidate = yes
	make_story_owner = scope:highest_scoring_cardinal_candidate
		# Reward beneficiary if it exists.
	scope:highest_scoring_cardinal_candidate = {
		if = {
			limit = {
				exists = var:beneficiary
				var:cardinal_campaign_contribution >= {
					value = cardinal_election_beneficiary_reward_threshold_per_tier 
					multiply = var:beneficiary.highest_held_title_tier
				}
			}
			var:beneficiary = {
				add_hook = { type = favor_hook target = prev years = 10 } 
				add_piety = cardinal_election_piety_for_beneficiary
			}
		}
		if = {
			limit = {
				has_variable = is_a_set_cardinal_player_candidate
			}
			remove_variable = is_a_set_cardinal_player_candidate
		}
		if = {
			limit = {
				exists = var:beneficiary
				var:beneficiary = {
					has_variable = has_set_cardinal_player_candidate
				}
			}
			var:beneficiary = { 
				remove_variable = has_set_cardinal_player_candidate
			}
		}
		if = {
			limit = {
				is_landed = no
			}
			add_trait = cardinal_priest
		}
		if = {
			limit = {
				is_landed = no
				is_theocratic_lessee = no
			}
			add_trait = cardinal_priest
			give_nickname = nick_cardinal
		}
		if = {
			limit = {
				is_landed = yes
				highest_held_title_tier >= tier_duchy
				NOT = { this = character:7853 }
			}
			add_trait = cardinal_archbishop
		}
		else_if = {
			limit = {
				is_landed = yes
				NOT = { this = character:7853 }
			}
			add_trait = cardinal_bishop
		}
		set_variable = was_once_cardinal
	}
	title:k_papal_state.holder = {
		send_interface_message = {
			type = event_generic_good_text
			title = newcardinalpromoted
			desc = newcardinalpromoted_desc

			left_icon = scope:highest_scoring_cardinal_candidate
		}
	}
}
predict_new_cardinal = {
	# Who's the most likely next elector?
	select_highest_scoring_cardinal_candidate = yes
	global_var:gui_storage = {
		set_variable = {
			name = predicted_cardinal
			value = scope:highest_scoring_cardinal_candidate
		}
	}
}
initialize_random_cardinal = {
	ordered_cardinal_candidate_ruler = {
		order_by = bishop_to_cardinal_score
		limit = { is_male = yes NOT = { this = character:7853 this = character:2010 } }
		position = 0
		#realm_priest = {
		become_initial_cardinal = yes 
		add_piety = 100
		if = {
			limit = {
				is_landed = no
			}
			add_trait = cardinal_priest
		}
		if = {
			limit = {
				is_landed = yes
				highest_held_title_tier >= tier_duchy
				NOT = { this = character:7853 }
			}
			add_trait = cardinal_archbishop
		}
		else_if = {
			limit = {
				is_landed = yes
				NOT = { this = character:7853 }
			}
			add_trait = cardinal_bishop
		}
	}
}
initialize_random_cardinals = {
	# Can easily split up the number of realm priest and ruler characters if you run out of one type.
	while = {
		count = num_initial_cardinals
		initialize_random_cardinal = yes
	}
}
# Updates the variables that are accessed by the cardinal window from the gui storage unit.
update_cardinal_window = {
	global_var:gui_storage = {
		update_preferatus = yes
		predict_new_cardinal = yes
		# Fetch the preferatus character into gui_storage
		set_variable = {
			name = preferatus_character
			value = global_var:preferatus.story_owner
		}
		# Fetch all cardinal characters into gui_storage
		clear_variable_list = cardinal_characters
		ordered_in_global_list = {
			order_by = story_owner.cardinal_to_pope_score
			max = num_cardinals
			variable = cardinals
			prev = {
				add_to_variable_list = {
					name = cardinal_characters
					target = prev.story_owner
				}
			}
		}
		# The preferatus gets their own icon slot, so let's remove them from the list.
		remove_list_variable = {
			name = cardinal_characters target = global_var:preferatus.story_owner
		}
		# Update player's candidates. They do not get a refund on their investments if this replaces the candidate.
		every_player = {
			#limit = {ruler_has_cardinality_eligible_realm_priest = yes} #can maybe remove this, it's removed in the other version
			select_highest_scoring_character_cardinal_candidate = yes
		}
	}
}
# Debugging tool to display the cardinals in the console
indicate_cardinals = {
	every_in_global_list = {
		variable = cardinals
		story_owner = {add_piety = 1}
	}
	add_gold = num_cardinals
	add_prestige = num_living_cardinals
}
# # Debug tool to see which cardinals are dead
# cardinal_test = {
# 	every_living_cardinal = {
# 		story_owner = {
# 			add_piety = 1
# 		}
# 	}
# 	every_living_cardinal = {
# 		add_prestige = 1
# 	}
# }

# Not used:
#setup_cardinal_activity = {
#	update_preferatus = yes
#	global_var:k_the_most_devout.holder = {set_designated_heir = global_var:preferatus.story_owner}
#	# Commented-out activity which could be used for a non-instant Papal Election:
#	#title:b_vaticano.title_province = {spawn_activity = { owner = global_var:preferatus.story_owner type = cardinal_activity}} 
#}

select_highest_scoring_character_cardinal_candidate_invest = {
	save_scope_as = player
	select_highest_scoring_character_cardinal_candidate = yes 

	if = {
		limit = {
			exists = var:cardinal_player_candidate
		}
		var:cardinal_player_candidate = {
			if = {
				limit = {
					NOT = {
						exists = var:cardinal_campaign_contribution
					}
				}
				set_variable = {name = cardinal_campaign_contribution value = 0}
			}
			change_variable = {name = cardinal_campaign_contribution add = cardinal_campaign_contribution_invest_cost}
			scope:player = {remove_short_term_gold = cardinal_campaign_contribution_invest_cost}
		
			update_preferatus = yes
			predict_new_cardinal = yes
			set_variable = {
				name = beneficiary
				value = scope:player
			}
		} 
	}
	else = {
		debug_log = "Failed Investment: var:cardinal_player_candidate Not Found"
	}
}


deinvest_in_cardinal_effect = {
	save_scope_as = player

	scope:player = {
		var:cardinal_player_candidate = {
			change_variable = {name = cardinal_campaign_contribution subtract = cardinal_campaign_contribution_invest_cost}
		}
	}
	scope:player = { add_gold = cardinal_campaign_contribution_divest_refund}		
	update_preferatus = yes
	predict_new_cardinal = yes

	scope:player = { 
		if = {
			limit = {
				var:cardinal_campaign_contribution <= cardinal_campaign_contribution_invest_cost
			} 
			remove_variable = beneficiary
		}
	}
}

CardinalsAreCardinals = {
	every_living_cardinal = {
		add_prestige = 1
		if = {
			limit = {
				is_landed = no
			}
			add_trait = cardinal_priest
		}
		if = {
			limit = {
				is_landed = yes
				highest_held_title_tier >= tier_duchy
				NOT = { this = character:7853 }
			}
			add_trait = cardinal_archbishop
		}
		else_if = {
			limit = {
				is_landed = yes
				NOT = { this = character:7853 }
			}
			add_trait = cardinal_bishop
		}
		# if = {
		# 	limit = {
		# 		is_landed = no
		# 	}
		# 	give_nickname = nick_cardinal
		# }
	}
}

scripted_effect_popethingevent = {
	title:k_papal_state.holder = { save_scope_as = scoped_pope }
	every_sibling = {
		limit = {familytrigger = yes}
		add_to_list = custom_list_name
	}
	every_child = {
		limit = {familytrigger = yes}
		add_to_list = custom_list_name
	}
	random_in_list = {
	   list = custom_list_name
	   save_scope_as = player_one
	   remove_from_list = custom_list_name
	}
	random_in_list = {
	   list = custom_list_name
	   save_scope_as = player_two
	}
}

# ROT

TCT_get_pope_of_target = {
	$TARGET$ = {
		if = {
			limit = { exists = var:TCT_antipope_of_ruler }
			var:TCT_antipope_of_ruler = { save_scope_as = pope_of_target }
		}
		else = {
			every_liege_or_above = {
				limit = { exists = var:TCT_antipope_of_ruler }
				var:TCT_antipope_of_ruler = { save_scope_as = pope_of_target }
			}
		}
		if = {
			limit = {
				NOT = { exists = scope:pope_of_target } exists = faith.religious_head 
			}
			faith.religious_head = { 
				save_scope_as = pope_of_target 
			}
		}
		if = {
			limit = {
				NOT = { exists = scope:pope_of_target } exists = title:k_papal_state.holder
			}
			title:k_papal_state.holder = {
				save_scope_as = pope_of_target
			}
		}
	}
}

TCT_is_pope_test = {
	if = {
		limit = { 
			TCT_is_pope_of_target_trigger = { TARGET = scope:actor POPE = root } 
		}
		root = { add_gold = 1000 }
	}
}

TCT_create_antipope = {
	$ANTIPOPE$ = {
		save_scope_as = TCT_antipope
		add_trait = TCT_antipope
		add_opinion = {
			modifier = TCT_created_antipope
			target = $CREATOR$
		}
		faith = {
			add_to_variable_list = {
				name = TCT_antipopes
				target = prev
			}
		}
		set_variable = {
			name = TCT_ruler_of_antipope
			value = $CREATOR$
		}
	}
	$CREATOR$ = {
		set_variable = {
			name = TCT_antipope_of_ruler
			value = $ANTIPOPE$
		}
	}
}

TCT_remove_antipope = {
	remove_trait = TCT_antipope
	faith = {
		if = {
			limit = { 
				has_variable_list = TCT_antipopes
				is_target_in_variable_list = {
					name = TCT_antipopes
					target = prev
				}
			}
			remove_list_variable = {
				name = TCT_antipopes
				target = prev
			}
		}
	}
	every_living_character = {
		limit = { exists = var:TCT_antipope_of_ruler }
		if = {
			limit = { var:TCT_antipope_of_ruler = prev }
			remove_variable = TCT_antipope_of_ruler
		}
	}
	if = {
		limit = { exists = var:TCT_ruler_of_antipope }
		remove_variable = TCT_ruler_of_antipope
	}
}

dictatuspapae = {
	every_ruler = {
		limit = {
			has_realm_law = free_investiture_early
		}
		add_to_global_variable_list = {
			name = rulersthathaveinvestiture
			target = this
		}
	}
	set_global_variable = dictatuspapae
	trigger_event = {
		id = KoH_religiousflavour.802
		days = 6
	}
}

send_child_to_clergy_effect_for_events = {
	# add_opinion = {
	# 	modifier = demanded_taking_vows
	# 	target = scope:actor
	# }
	#add the opinion in the events!
	add_trait = devoted
	add_piety_level = 1
	if = {
		limit = { is_ruler = yes }
		depose = yes
	}
	if = {
		limit = {
			is_married = yes
		}
		every_spouse = {
			divorce = scope:recipient
		}
	}
	if = {
		limit = {
			exists = betrothed
		}
		break_betrothal = betrothed
	}
	if = {
		limit = {
			is_concubine = yes
		}
		this.concubinist = {
			remove_concubine = scope:recipient
		}
	}
	if = {
		limit = {
			number_of_concubines > 0
		}
		every_concubine = {
			scope:recipient = {
				remove_concubine = prev
			}
		}
	}
}

removingvariableeffect = {
	remove_variable = TCT_conclave_influence
}

setingvariableeffect = {
	set_variable = {
		name = TCT_conclave_influence
		value = 1
	}
}

changingvariableeffect = {
	change_variable = {
		name = TCT_conclave_influence
		add = 1
	}
}

popeetitlechange = {
	save_scope_as = deadpope
	
	create_character = {
		location = scope:deadpope.capital_province
		age = { 30 33 }
		gender = male
		trait = education_learning_3
		trait = devoted
		faith = scope:deadpope.faith
		culture = scope:deadpope.culture
		learning = { 10 12 }
		save_scope_as = monk
	}

	update_preferatus = yes
	global_var:preferatus.story_owner = { depose = yes }
	global_var:preferatus.story_owner = {
		save_scope_as = preferatus 
	}
	create_title_and_vassal_change = {
		type = granted
		save_scope_as = papal_inheritance
	}
	# Transfer every non-barony title
	every_held_title = {
		limit = {
			tier > tier_barony
		}
		every_player = {
			add_prestige = 1
		}
		change_title_holder = {
			holder = global_var:preferatus.story_owner
			change = scope:papal_inheritance
		}
	}
	set_player_character = scope:preferatus
	# title:k_papal_state = {
	# 	change_title_holder = {
	# 		holder = global_var:preferatus.story_owner
	# 		change = scope:papal_inheritance
	# 	}
	# }
	resolve_title_and_vassal_change = scope:papal_inheritance

	global_var:preferatus.story_owner = {
		set_realm_capital = title:c_roma
	}

	global_var:preferatus = {
		promote_new_cardinal = yes
	}
	
	scope:preferatus = {
		set_player_character = scope:monk
	}

	scope:monk = {
		set_player_character = scope:preferatus
	}
	faith = { update_cardinal_window = yes }
	update_preferatus = yes

	scope:deadpope = {
		add_trait = pope_trait
		give_nickname = nick_pope
	}
}

testingversion = {
	add_gold = 10
}

councillor_leaving_effect = {
	if = {
		limit = { NOT = { is_councillor_of = scope:old_employer } }

		# Councillor leaving because of marriage
		if = {
			limit = {
				is_landed = no
				is_married = yes
				primary_spouse = { is_landed = yes }
			}
			scope:old_employer = {
				send_interface_message = {
					type = event_generic_neutral
					title = councillor_leaving_court_message_title
					left_icon = scope:councillor
					custom_tooltip = councillor_leaving_court_marriage_notification
				}
			}
		}
		# Councillor leaving because of title inheritance
		else_if = {
			limit = {
				is_landed = yes
				NOT = { is_vassal_of = scope:old_employer }
			}
			scope:old_employer = {
				send_interface_message = {
					type = event_generic_neutral
					title = councillor_leaving_court_message_title
					left_icon = scope:councillor
					custom_tooltip = councillor_leaving_court_landed_notification
				}
			}
		}
		# Councillor leaving because pope
		else_if = {
			limit = {
				scope:old_employer = {
					has_title = title:k_papal_state
				}
			}
			add_gold = 1
			# scope:old_employer = {
			# 	send_interface_message = {
			# 		type = event_generic_neutral
			# 		title = councillor_leaving_court_message_title
			# 		left_icon = scope:councillor
			# 		custom_tooltip = councillor_leaving_court_landed_notification
			# 	}
			# }
		}
		# Generic fallback
		else = {
			scope:old_employer = {
				send_interface_message = {
					type = event_generic_neutral
					title = councillor_leaving_court_message_title
					left_icon = scope:councillor
					custom_tooltip = councillor_leaving_court_generic_fallback_notification
				}
			}
		}
	}
}

take_gold_mod_effect = {
	remove_short_term_gold = 30
}

investiture_set_up_candidate = {
	save_scope_as = theocratic_inheritor
	scope:title_inheritor = {
		set_variable = {
			name = theocratic_successor
			value = scope:theocratic_inheritor
		}
	}
	set_variable = {
		name = theocratic_successor
		value = scope:title_inheritor
	}
}

# Updates the likely next cardinal candidate ("Predictus" is the mod's term for it, but it is not a real term, unlike Preferatus.)
select_highest_scoring_cardinal_candidate_test2 = { 
	# Look for rulers who are valid candidates:
	ordered_cardinal_candidate_ruler = {
		order_by = bishop_to_cardinal_score
		position = 0
		add_gold = 10
	}
	# You can easily change this system to use one secular and one spiritual candidate, if you wish to show such in the GUI.
}